seed	train_num	model_name	status	comment	acc	auc	code
		text_27	SUCCEEDED	0_succeeded	0.7588	0.8465177371044941	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'astonishing', 'amazing', 'wonderful', 'great', 'good', 'love', 'best', 'favorite', 'recommend', 'enjoy', 'beautiful', 'charming', 'happy', 'fun', 'interesting', 'moving', 'insightful', 'riveting', 'captivating', 'powerful', 'strong', 'superb', 'brilliant', 'talented', 'impressive', 'incredible', 'fantastic', 'memorable', 'touching', 'heartfelt', 'emotional', 'engaging', 'entertaining', 'well-done', 'well-crafted', 'well-acted', 'well-written', 'well-directed', 'masterpiece', 'classic', 'must-see', 'highly']
        negative_words = ['awful', 'terrible', 'horrible', 'bad', 'worst', 'disappointing', 'boring', 'dull', 'uninteresting', 'forgettable', 'waste', 'lame', 'stupid', 'ridiculous', 'poor', 'weak', 'uninspired', 'unoriginal', 'predictable', 'clich√©', 'pointless', 'lousy', 'crappy', 'garbage', 'trash', 'disaster', 'flop', 'failure', 'mediocre', 'unconvincing', 'unbelievable', 'unimpressive', 'annoying', 'irritating', 'painful', 'tiresome', 'tedious', 'dragging', 'flat', 'unappealing', 'unengaging', 'unentertaining', 'poorly-done', 'poorly-crafted', 'poorly-acted', 'poorly-written', 'poorly-directed', 'avoid']

        positive_count = sum([1 for word in positive_words if re.search(r'\b' + word + r'\b', text, re.IGNORECASE)])
        negative_count = sum([1 for word in negative_words if re.search(r'\b' + word + r'\b', text, re.IGNORECASE)])

        sentiment_score = (positive_count - negative_count) / (positive_count + negative_count + 1e-6)
        y = (sentiment_score + 1) / 2

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_19	SUCCEEDED	0_succeeded	0.7657	0.8251222903647978	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'astonishing', 'amazing', 'wonderful', 'great', 'fantastic', 'superb', 'highly', 'recommended', 'best', 'love', 'favorite', 'enjoy', 'good', 'happy', 'beautiful', 'brilliant', 'incredible', 'perfect', 'masterpiece']
        negative_words = ['awful', 'terrible', 'horrible', 'worst', 'boring', 'waste', 'disappointing', 'poor', 'bad', 'lame', 'ridiculous', 'stupid', 'dumb', 'garbage', 'trash', 'disgusting', 'unwatchable', 'forgettable', 'annoying', 'painful', 'unbearable']

        positive_count = sum([1 for word in positive_words if word in text.lower()])
        negative_count = sum([1 for word in negative_words if word in text.lower()])

        # Calculate the probability of the target being 1 based on the counts of positive and negative words
        if positive_count + negative_count == 0:
            y = 0.5
        else:
            y = positive_count / (positive_count + negative_count)

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_6	SUCCEEDED	0_succeeded	0.738	0.8156461272648776	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'amazing', 'great', 'wonderful', 'best', 'love', 'good', 'enjoy', 'favorite', 'beautiful']
        negative_words = ['awful', 'terrible', 'worst', 'boring', 'disappointing', 'bad', 'hate', 'annoying', 'waste', 'poor']

        positive_count = sum([1 for word in positive_words if word in text.lower()])
        negative_count = sum([1 for word in negative_words if word in text.lower()])

        # Calculate the sentiment score
        sentiment_score = (positive_count - negative_count) / (positive_count + negative_count + 1)

        # Normalize the sentiment score to a probability value between 0 and 1
        y = (sentiment_score + 1) / 2

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_15	SUCCEEDED	0_succeeded	0.738	0.8156461272648776	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'amazing', 'great', 'wonderful', 'best', 'love', 'good', 'enjoy', 'favorite', 'beautiful']
        negative_words = ['awful', 'terrible', 'worst', 'boring', 'disappointing', 'bad', 'hate', 'annoying', 'waste', 'poor']

        positive_count = sum([1 for word in positive_words if word in text.lower()])
        negative_count = sum([1 for word in negative_words if word in text.lower()])

        # Calculate the sentiment score
        sentiment_score = (positive_count - negative_count) / (positive_count + negative_count + 1)

        # Normalize the sentiment score to a probability value between 0 and 1
        y = (sentiment_score + 1) / 2

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_5	SUCCEEDED	0_succeeded	0.7345	0.8127997913230525	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'amazing', 'great', 'wonderful', 'best', 'love', 'good', 'favorite', 'enjoy', 'beautiful']
        negative_words = ['awful', 'terrible', 'worst', 'boring', 'disappointing', 'bad', 'hate', 'poor', 'waste', 'ugly']

        positive_count = sum([1 for word in positive_words if word in text.lower()])
        negative_count = sum([1 for word in negative_words if word in text.lower()])

        # Calculate the sentiment score
        sentiment_score = (positive_count - negative_count) / (positive_count + negative_count + 1)

        # Normalize the sentiment score to a probability value between 0 and 1
        y = (sentiment_score + 1) / 2

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_23	SUCCEEDED	0_succeeded	0.7096	0.8127418529347432	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'astonishing', 'amazing', 'wonderful', 'great', 'good', 'love', 'like', 'enjoy', 'favorite', 'best', 'recommend', 'beautiful', 'happy', 'interesting', 'fun', 'memorable', 'charming', 'superb', 'perfect', 'masterpiece']
        negative_words = ['awful', 'terrible', 'horrible', 'bad', 'hate', 'dislike', 'boring', 'worst', 'disappointing', 'poor', 'lousy', 'ridiculous', 'stupid', 'waste', 'lame', 'forgettable', 'annoying', 'dull', 'predictable', 'uninteresting']

        positive_count = sum([1 for word in positive_words if re.search(r'\b' + word + r'\b', text, re.IGNORECASE)])
        negative_count = sum([1 for word in negative_words if re.search(r'\b' + word + r'\b', text, re.IGNORECASE)])

        sentiment_score = (positive_count - negative_count) / (positive_count + negative_count + 1e-6)

        y = (sentiment_score + 1) / 2

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_20	SUCCEEDED	0_succeeded	0.738	0.8085187564815587	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'amazing', 'great', 'wonderful', 'best', 'love', 'good', 'enjoy', 'favorite', 'beautiful']
        negative_words = ['awful', 'terrible', 'worst', 'boring', 'disappointing', 'bad', 'hate', 'annoying', 'waste', 'poor']

        positive_count = sum([1 for word in positive_words if word in text.lower()])
        negative_count = sum([1 for word in negative_words if word in text.lower()])

        sentiment_score = positive_count - negative_count

        # Normalize the sentiment score to a probability value between 0 and 1
        y = 1 / (1 + np.exp(-sentiment_score))

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_11	SUCCEEDED	0_succeeded	0.7432	0.8080917257761557	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'astonishing', 'amazing', 'wonderful', 'great', 'good', 'love', 'best', 'favorite', 'recommend', 'enjoy', 'beautiful', 'charming', 'happy', 'fun', 'interesting', 'moving', 'insightful', 'riveting', 'captivating', 'powerful', 'memorable', 'heart']
        negative_words = ['awful', 'terrible', 'horrible', 'bad', 'worst', 'hate', 'disappointing', 'boring', 'dull', 'stupid', 'ridiculous', 'lame', 'predictable', 'forgettable', 'waste', 'annoying', 'uninteresting', 'uninspired', 'pointless', 'weak', 'poor', 'painful', 'insulting']

        positive_count = sum([1 for word in positive_words if re.search(r'\b' + word + r'\b', text, re.IGNORECASE)])
        negative_count = sum([1 for word in negative_words if re.search(r'\b' + word + r'\b', text, re.IGNORECASE)])

        if positive_count + negative_count == 0:
            y = 0.5
        else:
            y = positive_count / (positive_count + negative_count)

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_3	SUCCEEDED	0_succeeded	0.7418	0.8075368240762895	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'astonishing', 'amazing', 'wonderful', 'great', 'good', 'love', 'best', 'favorite', 'recommend', 'enjoy', 'beautiful', 'charming', 'happy', 'fun', 'interesting', 'memorable', 'insightful', 'riveting', 'captivating', 'powerful', 'moving', 'heart']
        negative_words = ['awful', 'terrible', 'horrible', 'worst', 'boring', 'dull', 'disappointing', 'waste', 'forgettable', 'uninteresting', 'poor', 'bad', 'lame', 'ridiculous', 'stupid', 'annoying', 'painful', 'unpleasant', 'uninspired', 'predictable', 'clich√©', 'weak', 'insulting']

        positive_count = sum([1 for word in positive_words if re.search(r'\b' + word + r'\b', text, re.IGNORECASE)])
        negative_count = sum([1 for word in negative_words if re.search(r'\b' + word + r'\b', text, re.IGNORECASE)])

        if positive_count + negative_count == 0:
            y = 0.5
        else:
            y = positive_count / (positive_count + negative_count)

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_14	SUCCEEDED	0_succeeded	0.7279	0.8047020655524371	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'amazing', 'great', 'wonderful', 'best', 'love', 'good', 'favorite', 'enjoy', 'beautiful']
        negative_words = ['awful', 'terrible', 'worst', 'boring', 'disappointing', 'bad', 'hate', 'annoying', 'ugly', 'poor']

        positive_count = sum([1 for word in positive_words if word in text.lower()])
        negative_count = sum([1 for word in negative_words if word in text.lower()])

        # Calculate the sentiment score
        sentiment_score = (positive_count - negative_count) / (positive_count + negative_count + 1)

        # Normalize the sentiment score to a probability value between 0 and 1
        y = (sentiment_score + 1) / 2

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_22	SUCCEEDED	0_succeeded	0.7279	0.8047020655524371	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'amazing', 'great', 'wonderful', 'best', 'love', 'good', 'favorite', 'enjoy', 'beautiful']
        negative_words = ['awful', 'terrible', 'worst', 'boring', 'disappointing', 'bad', 'hate', 'poor', 'ugly', 'annoying']

        positive_count = sum([1 for word in positive_words if word in text.lower()])
        negative_count = sum([1 for word in negative_words if word in text.lower()])

        # Calculate the sentiment score based on the counts of positive and negative words
        sentiment_score = (positive_count - negative_count) / (positive_count + negative_count + 1)

        # Normalize the sentiment score to a probability value between 0 and 1
        y = (sentiment_score + 1) / 2

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_12	SUCCEEDED	0_succeeded	0.7324	0.8041486707444143	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'amazing', 'great', 'good', 'love', 'best', 'wonderful', 'enjoy', 'favorite', 'beautiful']
        negative_words = ['awful', 'bad', 'terrible', 'worst', 'boring', 'disappointing', 'poor', 'waste', 'dislike', 'ugly']

        positive_count = sum([1 for word in positive_words if word in text.lower()])
        negative_count = sum([1 for word in negative_words if word in text.lower()])

        sentiment_score = positive_count - negative_count

        y = 1 / (1 + np.exp(-sentiment_score))

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_30	SUCCEEDED	0_succeeded	0.7428	0.8015443897249623	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'amazing', 'great', 'good', 'love', 'best', 'wonderful', 'enjoy', 'favorite', 'beautiful']
        negative_words = ['awful', 'bad', 'terrible', 'worst', 'boring', 'disappointing', 'poor', 'waste', 'ridiculous', 'stupid']

        positive_count = sum([1 for word in positive_words if word in text.lower()])
        negative_count = sum([1 for word in negative_words if word in text.lower()])

        # Calculate the probability of the target being 1 based on the counts of positive and negative words
        if positive_count + negative_count == 0:
            y = 0.5
        else:
            y = positive_count / (positive_count + negative_count)

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_8	SUCCEEDED	0_succeeded	0.7404	0.7993254946914317	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'astonishing', 'amazing', 'wonderful', 'great', 'good', 'love', 'best', 'favorite', 'recommended', 'enjoy', 'beautiful', 'charming', 'memorable', 'superb', 'highly']
        negative_words = ['awful', 'terrible', 'horrible', 'worst', 'bad', 'disappointing', 'boring', 'ridiculous', 'poor', 'lame', 'waste', 'forgettable', 'uninteresting', 'weak', 'dull', 'low']

        positive_count = sum([1 for word in positive_words if re.search(r'\b' + word + r'\b', text, re.IGNORECASE)])
        negative_count = sum([1 for word in negative_words if re.search(r'\b' + word + r'\b', text, re.IGNORECASE)])

        if positive_count + negative_count == 0:
            y = 0.5
        else:
            y = positive_count / (positive_count + negative_count)

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_25	SUCCEEDED	0_succeeded	0.7389	0.7983026966618254	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'astonishing', 'amazing', 'wonderful', 'great', 'good', 'love', 'best', 'favorite', 'enjoy', 'beautiful', 'charming', 'memorable', 'recommend', 'superb', 'masterpiece']
        negative_words = ['awful', 'terrible', 'horrible', 'worst', 'boring', 'disappointing', 'waste', 'stupid', 'ridiculous', 'lame', 'forgettable', 'bad', 'poor', 'uninteresting', 'predictable']

        positive_count = sum([1 for word in positive_words if re.search(r'\b' + word + r'\b', text, re.IGNORECASE)])
        negative_count = sum([1 for word in negative_words if re.search(r'\b' + word + r'\b', text, re.IGNORECASE)])

        if positive_count + negative_count == 0:
            y = 0.5
        else:
            y = positive_count / (positive_count + negative_count)

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_28	SUCCEEDED	0_succeeded	0.7389	0.7983026966618254	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'astonishing', 'amazing', 'wonderful', 'great', 'good', 'love', 'best', 'favorite', 'enjoy', 'beautiful', 'charming', 'memorable', 'recommend', 'superb', 'masterpiece']
        negative_words = ['awful', 'terrible', 'horrible', 'worst', 'boring', 'disappointing', 'waste', 'stupid', 'ridiculous', 'lame', 'forgettable', 'bad', 'poor', 'uninteresting', 'predictable']

        positive_count = sum([1 for word in positive_words if re.search(r'\b' + word + r'\b', text, re.IGNORECASE)])
        negative_count = sum([1 for word in negative_words if re.search(r'\b' + word + r'\b', text, re.IGNORECASE)])

        if positive_count + negative_count == 0:
            y = 0.5
        else:
            y = positive_count / (positive_count + negative_count)

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_9	SUCCEEDED	0_succeeded	0.714	0.7964840353081047	"import numpy as np
import re
from collections import Counter

def predict(x):
    df = x.copy()
    output = []

    # Preprocess the text data
    def preprocess_text(text):
        text = text.lower()
        text = re.sub(r'<br />', ' ', text)
        text = re.sub(r'\W+', ' ', text)
        return text

    # Calculate the word frequency in the text
    def word_frequency(text):
        words = text.split()
        word_count = Counter(words)
        return word_count

    # Calculate the sentiment score of the text
    def sentiment_score(text):
        positive_words = ['good', 'great', 'excellent', 'best', 'love', 'amazing', 'awesome', 'wonderful', 'favorite', 'enjoy']
        negative_words = ['bad', 'worst', 'awful', 'terrible', 'hate', 'boring', 'disappointing', 'poor', 'annoying', 'waste']

        word_count = word_frequency(text)
        positive_score = sum(word_count[word] for word in positive_words)
        negative_score = sum(word_count[word] for word in negative_words)

        return (positive_score - negative_score) / (positive_score + negative_score + 1)

    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        preprocessed_text = preprocess_text(text)
        score = sentiment_score(preprocessed_text)

        # Calculate the probability of target being 1
        y = 1 / (1 + np.exp(-score))

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_29	SUCCEEDED	0_succeeded	0.7377	0.7943009337650883	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'amazing', 'great', 'wonderful', 'good', 'love', 'best', 'favorite', 'enjoy', 'beautiful']
        negative_words = ['awful', 'terrible', 'bad', 'worst', 'disappointing', 'hate', 'boring', 'poor', 'waste', 'ridiculous']

        positive_count = sum([1 for word in positive_words if word in text.lower()])
        negative_count = sum([1 for word in negative_words if word in text.lower()])

        total_count = positive_count + negative_count

        if total_count == 0:
            y = 0.5
        else:
            y = positive_count / total_count

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_24	SUCCEEDED	0_succeeded	0.738	0.7941379586029751	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'amazing', 'great', 'wonderful', 'best', 'love', 'good', 'enjoy', 'favorite', 'beautiful']
        negative_words = ['awful', 'terrible', 'worst', 'boring', 'disappointing', 'bad', 'hate', 'annoying', 'waste', 'poor']

        positive_count = sum([1 for word in positive_words if word in text.lower()])
        negative_count = sum([1 for word in negative_words if word in text.lower()])

        # Calculate the probability of the target being 1 based on the counts of positive and negative words
        if positive_count + negative_count == 0:
            y = 0.5
        else:
            y = positive_count / (positive_count + negative_count)

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_16	SUCCEEDED	0_succeeded	0.7257	0.7781046229748911	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'amazing', 'great', 'wonderful', 'good', 'love', 'best', 'favorite', 'enjoy', 'beautiful']
        negative_words = ['awful', 'terrible', 'bad', 'horrible', 'worst', 'hate', 'disappoint', 'boring', 'ugly', 'annoy']

        positive_count = sum([1 for word in positive_words if word in text.lower()])
        negative_count = sum([1 for word in negative_words if word in text.lower()])

        # Calculate the probability of the target being 1 based on the counts of positive and negative words
        if positive_count + negative_count == 0:
            y = 0.5
        else:
            y = positive_count / (positive_count + negative_count)

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_18	SUCCEEDED	0_succeeded	0.6775	0.7748509837862029	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'astonishing', 'amazing', 'wonderful', 'great', 'good', 'love', 'like', 'enjoy', 'best']
        negative_words = ['awful', 'terrible', 'horrible', 'worst', 'bad', 'hate', 'dislike', 'disappoint', 'boring']

        positive_count = sum([1 for word in positive_words if word in text.lower()])
        negative_count = sum([1 for word in negative_words if word in text.lower()])

        # Calculate the probability of target being 1
        y = (positive_count + 1) / (positive_count + negative_count + 2)

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_1	SUCCEEDED	0_succeeded	0.7028	0.7471205861791317	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'astonishing', 'amazing', 'wonderful', 'great', 'good', 'love', 'enjoy', 'best', 'favorite']
        negative_words = ['awful', 'terrible', 'horrible', 'worst', 'boring', 'disappointing', 'hate', 'annoying', 'ridiculous', 'stupid']

        positive_count = sum([1 for word in positive_words if word in text.lower()])
        negative_count = sum([1 for word in negative_words if word in text.lower()])

        # Calculate the probability of the target being 1 based on the counts of positive and negative words
        if positive_count + negative_count == 0:
            y = 0.5
        else:
            y = positive_count / (positive_count + negative_count)

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_21	SUCCEEDED	0_succeeded	0.7028	0.7471205861791317	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'astonishing', 'amazing', 'wonderful', 'great', 'good', 'love', 'enjoy', 'best', 'favorite']
        negative_words = ['awful', 'terrible', 'horrible', 'worst', 'boring', 'disappointing', 'hate', 'annoying', 'ridiculous', 'stupid']

        positive_count = sum([1 for word in positive_words if word in text.lower()])
        negative_count = sum([1 for word in negative_words if word in text.lower()])

        # Calculate the probability of the target being 1 based on the counts of positive and negative words
        if positive_count + negative_count == 0:
            y = 0.5
        else:
            y = positive_count / (positive_count + negative_count)

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_26	SUCCEEDED	0_succeeded	0.7028	0.7471205861791317	"import numpy as np
import re

def predict(x):
    df = x.copy()
    output = []
    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        text = row['text']
        positive_words = ['excellent', 'astonishing', 'amazing', 'wonderful', 'great', 'good', 'love', 'enjoy', 'best', 'favorite']
        negative_words = ['awful', 'terrible', 'horrible', 'worst', 'boring', 'disappointing', 'hate', 'annoying', 'ridiculous', 'stupid']

        positive_count = sum([1 for word in positive_words if word in text.lower()])
        negative_count = sum([1 for word in negative_words if word in text.lower()])

        # Calculate the probability of the target being 1 based on the counts of positive and negative words
        if positive_count + negative_count == 0:
            y = 0.5
        else:
            y = positive_count / (positive_count + negative_count)

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_2	SUCCEEDED	0_succeeded	0.634	0.7381230087225826	"import numpy as np
import re
from collections import Counter

def predict(x):
    df = x.copy()
    output = []

    # Preprocess the text data
    def preprocess_text(text):
        text = text.lower()
        text = re.sub(r'<br />', ' ', text)
        text = re.sub(r'[^a-z\s]', '', text)
        return text

    df['text'] = df['text'].apply(preprocess_text)

    # Calculate word frequencies
    word_freq = Counter()
    for text in df['text']:
        word_freq.update(text.split())

    # Calculate sentiment scores
    def sentiment_score(text):
        words = text.split()
        pos_words = ['good', 'great', 'excellent', 'amazing', 'wonderful', 'love', 'best', 'favorite', 'enjoy', 'happy']
        neg_words = ['bad', 'terrible', 'awful', 'horrible', 'worst', 'hate', 'dislike', 'boring', 'disappointing', 'sad']
        pos_count = sum([word_freq[word] for word in words if word in pos_words])
        neg_count = sum([word_freq[word] for word in words if word in neg_words])
        return (pos_count - neg_count) / (pos_count + neg_count + 1)

    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        score = sentiment_score(row['text'])
        y = 1 / (1 + np.exp(-score))

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_17	SUCCEEDED	0_succeeded	0.634	0.7381230087225826	"import numpy as np
import re
from collections import Counter

def predict(x):
    df = x.copy()
    output = []

    # Preprocess the text data
    def preprocess_text(text):
        text = text.lower()
        text = re.sub(r'<br />', ' ', text)
        text = re.sub(r'[^a-z\s]', '', text)
        return text

    df['text'] = df['text'].apply(preprocess_text)

    # Calculate word frequencies
    word_freq = Counter()
    for text in df['text']:
        word_freq.update(text.split())

    # Calculate sentiment scores
    def sentiment_score(text):
        words = text.split()
        pos_words = ['good', 'great', 'excellent', 'amazing', 'wonderful', 'love', 'best', 'favorite', 'enjoy', 'happy']
        neg_words = ['bad', 'terrible', 'awful', 'horrible', 'worst', 'hate', 'dislike', 'boring', 'disappointing', 'sad']
        pos_count = sum([word_freq[word] for word in words if word in pos_words])
        neg_count = sum([word_freq[word] for word in words if word in neg_words])
        return (pos_count - neg_count) / (pos_count + neg_count + 1)

    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        score = sentiment_score(row['text'])
        y = 1 / (1 + np.exp(-score))

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_13	SUCCEEDED	0_succeeded	0.6381	0.6774667357793527	"import numpy as np
import re
from collections import Counter

def predict(x):
    df = x.copy()
    output = []

    # Preprocess the text data
    def preprocess_text(text):
        text = text.lower()
        text = re.sub(r'<br />', ' ', text)
        text = re.sub(r'[^a-z\s]', '', text)
        return text

    df['text'] = df['text'].apply(preprocess_text)

    # Calculate word frequencies
    word_freq = Counter()
    for text in df['text']:
        word_freq.update(text.split())

    # Calculate sentiment scores
    def sentiment_score(text):
        words = text.split()
        pos_words = ['good', 'great', 'excellent', 'amazing', 'wonderful', 'love', 'best', 'favorite', 'enjoy', 'beautiful']
        neg_words = ['bad', 'terrible', 'awful', 'horrible', 'worst', 'hate', 'boring', 'disappointing', 'poor', 'ugly']
        pos_count = sum([word_freq[word] for word in words if word in pos_words])
        neg_count = sum([word_freq[word] for word in words if word in neg_words])
        return (pos_count - neg_count) / len(words)

    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        score = sentiment_score(row['text'])
        y = 1 / (1 + np.exp(-score))

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_4	FAILED	2_predict_method_error			"import numpy as np
import re
from collections import Counter

def predict(x):
    df = x.copy()
    output = []

    # Calculate the average target value for each word in the dataset
    word_target = {}
    for index, row in df.iterrows():
        words = re.findall(r'\w+', row['text'].lower())
        for word in words:
            if word not in word_target:
                word_target[word] = [row['target'], 1]
            else:
                word_target[word][0] += row['target']
                word_target[word][1] += 1

    for key in word_target:
        word_target[key] = word_target[key][0] / word_target[key][1]

    # Predict the target value for each text based on the average target values of its words
    for index, row in df.iterrows():
        words = re.findall(r'\w+', row['text'].lower())
        word_counts = Counter(words)
        total_weight = sum(word_counts.values())
        y = sum(word_target[word] * count for word, count in word_counts.items()) / total_weight
        output.append(y)

    return np.array(output)"
		text_7	FAILED	2_predict_method_error			"import numpy as np
import re
from collections import Counter

def predict(x):
    df = x.copy()
    output = []

    # Calculate the average target value for each word in the dataset
    word_target = {}
    for index, row in df.iterrows():
        words = re.findall(r'\w+', row['text'].lower())
        for word in words:
            if word not in word_target:
                word_target[word] = [row['target'], 1]
            else:
                word_target[word][0] += row['target']
                word_target[word][1] += 1

    for key in word_target:
        word_target[key] = word_target[key][0] / word_target[key][1]

    for index, row in df.iterrows():
        # Do not change the code before this point.
        # Please describe the process required to make the prediction below.

        # Calculate the average target value for words in the given text
        words = re.findall(r'\w+', row['text'].lower())
        word_counts = Counter(words)
        total_weight = 0
        total_count = 0
        for word, count in word_counts.items():
            if word in word_target:
                total_weight += word_target[word] * count
                total_count += count

        # Calculate the probability value based on the average target value of words in the text
        if total_count > 0:
            y = total_weight / total_count
        else:
            y = 0.5

        # Do not change the code after this point.
        output.append(y)
    return np.array(output)"
		text_10	FAILED	2_predict_method_error			"import numpy as np
import re
from collections import Counter

def predict(x):
    df = x.copy()
    output = []

    # Calculate the average target value for each word in the dataset
    word_target = {}
    for index, row in df.iterrows():
        words = re.findall(r'\w+', row['text'].lower())
        for word in words:
            if word not in word_target:
                word_target[word] = [row['target'], 1]
            else:
                word_target[word][0] += row['target']
                word_target[word][1] += 1

    for key in word_target:
        word_target[key] = word_target[key][0] / word_target[key][1]

    # Predict the target value for each text based on the average target values of its words
    for index, row in df.iterrows():
        words = re.findall(r'\w+', row['text'].lower())
        word_counts = Counter(words)
        total_score = 0
        total_weight = 0
        for word, count in word_counts.items():
            if word in word_target:
                total_score += word_target[word] * count
                total_weight += count
        y = total_score / total_weight if total_weight > 0 else 0.5
        output.append(y)

    return np.array(output)"
